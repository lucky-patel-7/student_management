pipeline {
    agent any
    stages {
        stage('Setup Docker') {
            steps {
                script {
                    def dockerImage = 'docker:latest'
                    def dockerSocket = '/var/run/docker.sock:/var/run/docker.sock'
                    docker.withRegistry('') {
                        docker.image(dockerImage).pull()
                    }
                    docker.image(dockerImage).inside("--privileged -v ${dockerSocket}") {
                        sh 'docker --version'
                    }
                }
            }
        }
        stage('Build and Publish Docker Image') {
            environment {
                IMAGE_NAME = 'test'
                GIT_USERNAME = 'LuckyPatel'
                GIT_PASSWORD = 'Kq6jMBQaYjXzvnx'
            }
            steps {
                sh "docker build --build-arg GIT_USERNAME=$GIT_USERNAME --build-arg GIT_PASSWORD=$GIT_PASSWORD -f ./NodeDocker -t $IMAGE_NAME ."
                sh "docker run -d -p 80:80 $IMAGE_NAME"
            }
            post {
                success {
                    emailext attachLog: true, body: '''Hello there! Here is your Docker build results attached.''', subject: 'Docker Image Build Success', to: 'lucky.patel@silvertouch.com'
                }
                failure {
                    emailext attachLog: true, body: '''Hello there! Here is your Docker build results attached.''', subject: 'Docker Image Build Failed', to: 'lucky.patel@silvertouch.com'
                }
            }
        }
    }
}
